syntax = "proto3";

package iotfsdb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "iotfsdb-enums.proto";

option java_package = "org.huebert.iotfsdb.api.proto";

// File represents a binary file with optional filename
message File {
  bytes data = 1;
  google.protobuf.StringValue filename = 2;
}

// RelativeTime represents a time relative to now
message RelativeTime {
  int32 value = 1;
  TimeUnit unit = 2;
}

// Series represents a time series with its definition and metadata
message Series {
  SeriesDefinition definition = 1;
  map<string, string> metadata = 2;
}

// SeriesCriteria used for querying series
message SeriesCriteria {
  google.protobuf.StringValue id = 1;
  map<string, string> metadata = 2;
}

// SeriesData contains values for a specific series
message SeriesData {
  string id = 1;
  repeated SeriesValue values = 2;
}

// SeriesDefinition defines the properties of a time series
message SeriesDefinition {
  string id = 1;                                  // Unique identifier for the series
  NumberType type = 2;                            // Storage type for the values
  int64 interval_ms = 3;                          // Expected interval between values in milliseconds
  PartitionPeriod partition = 4;                  // How data is partitioned for storage
  google.protobuf.DoubleValue min = 5;            // Optional minimum expected value (for compression)
  google.protobuf.DoubleValue max = 6;            // Optional maximum expected value (for compression)
}

// SeriesValue represents a single timestamped value in a series
message SeriesValue {
  google.protobuf.Timestamp timestamp = 1;
  double value = 2;
}

// Time represents either an absolute or relative time
message Time {
  oneof time_option {
    RelativeTime relative_time = 1;
    google.protobuf.Timestamp timestamp = 2;
  }
}

// TimeRange represents a time interval with start and end times
message TimeRange {
  Time from = 1;
  Time to = 2;
}

// Status represents the result of an operation
message Status {
  bool success = 1;                               // Whether the operation succeeded
  StatusCode code = 2;                            // Specific status code
  string message = 3;                             // Human-readable status message
}
