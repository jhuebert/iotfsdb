syntax = "proto3";

package iotfsdb;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "enums.proto";

option java_package = "org.huebert.iotfsdb.api.grpc.proto";
option java_outer_classname = "TypesProto";

// Represents a binary file with optional filename
message File {
  bytes data = 1;
  string filename = 2;
}

// NullHandler defines how null values are handled in queries
message NullHandler {
  NullOption null_option = 1;
  double null_value = 2;
}

// Series represents a time series with its definition and metadata
message Series {
  SeriesDefinition definition = 1;
  map<string, string> metadata = 2;
}

// Search criteria used for querying series
message SeriesCriteria {
  string id = 1;
  map<string, string> metadata = 2;
}

// Contains data values for a specific series
message SeriesData {
  string id = 1;
  repeated SeriesValue values = 2;
}

// Defines the properties of a time series
message SeriesDefinition {
  string id = 1;                         // Unique identifier for the series
  google.protobuf.Duration interval = 2; // Expected time interval between values
  PartitionPeriod partition = 3;         // How data is partitioned for storage
  NumberType type = 4;                   // Storage type for the values
  double min = 5;                        // Minimum expected value for MAPPED and CURVED types
  double max = 6;                        // Maximum expected value for MAPPED and CURVED types
}

// Represents a single timestamped value in a series
message SeriesValue {
  google.protobuf.Timestamp timestamp = 1;
  double value = 2;
}

// Controls the size of data returned in queries
message SizeControl {
  google.protobuf.Duration interval = 1;
  int32 size = 2;
}

// Time represents either an absolute or relative time
message Time {
  oneof time_option {
    google.protobuf.Duration relative_time = 1;
    google.protobuf.Timestamp timestamp = 2;
  }
}

// Represents a time interval with start and end times
message TimeRange {
  Time start = 1;
  Time end = 2;
}

// Status represents the result of an operation
message Status {
  bool success = 1;    // Whether the operation succeeded
  StatusCode code = 2; // Specific status code
  string message = 3;  // Human-readable status message
}
